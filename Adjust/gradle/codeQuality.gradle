// Creates tasks based on the application build variant (productFlavor + buildType = variant)
(android.hasProperty("applicationVariants")
        ? android."applicationVariants"
        : android."libraryVariants").all { variant ->

    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class']

    // Generates Lint reports based off the source code.
    variant.assemble.dependsOn "lint$variantName"

    /**
     * Generates PMD reports based off the source code.
     */
    task("pmd$variantName", type: Pmd, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Pmd reports."

        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }

        source = files(variant.javaCompiler.source)
        classpath = files(configurations.compile.files)
    }

    /**
     * Generates FindBugs reports based off the source code.
     */
    task("findbugs$variantName", type: FindBugs, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Findbugs reports."

        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }

        effort = "max"
        reportLevel = "low"
        source = files(variant.javaCompiler.source)
        classpath = files(configurations.compile.files)
        classes = fileTree(dir: variant.javaCompile.destinationDir, excludes: autoGenerated)
    }

    /**
     * Generates Checkstyle reports based off the source code.
     */
    task("checkstyle$variantName", type: Checkstyle, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Checkstyle reports."

        ignoreFailures = true
        reports.html.enabled = true

        configFile = rootProject.file("./.buildscript/checkstyle-hard.xml")
        source = files(android.sourceSets.main.java.srcDirs)
        classpath = files(configurations.compile.files)
    }
}
